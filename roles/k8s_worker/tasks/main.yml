---
# tasks file for K8s-worker

- debug:
      msg: "Now configuring the worker nodes.."

#- name: Remove docker if already installed from CentOS repo
#  yum:
#     name:
#        - docker-client
#        - docker-client-latest
#        - docker-common
#        - docker-latest
#        - docker-latest-logrotate
#        - docker-logrotate
#        - docker-engine
#     state: removed

#- name : importing required GPG-Keys
#  rpm_key:
#       state: present
#       key: "{{ item }}"
#  with_items:
#  - "https://packages.cloud.google.com/yum/doc/yum-key.gpg"
#  - "https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg"

#- name: "Installing python3"
#  package:
#            name: "python3"
#            state: present

#- name: "Configuring repository for docker"
#  yum_repository:
#               name: "docker"
#               description: "yum repo for docker"
#               baseurl: "https://download.docker.com/linux/centos/7/x86_64/stable/"
#               gpgcheck: no
  #when: false

#- name: "Installing containerd.io"
#  package:
#                 name: "https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.4.3-3.1.el7.x86_64.rpm"
#                 state: present
#                 disable_gpg_check: True
  #when: false

- name: "Installing docker"
  package:
            name: "docker"
            state: present

#- name: "Disabling SElinux"
#  selinux:
#          state: disabled
#  when: false

- name: "Starting and enabling docker service permanently"
  service:
            name: "docker"
            state: started
            enabled: yes

- name: "Configuring repository for K8s"
  yum_repository:
            name: "K8s-repo"
            description: "Repository for K8s"
            baseurl: "https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64"
            gpgcheck: yes
            repo_gpgcheck: yes
            gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
            enabled: yes

- name: "Installing kubeadm, kubectl and kubelet"
  package:
       name: "{{ packages }}"
       state: present
       update_cache: yes
  vars:
       packages:
        - kubelet
        - kubeadm
        - kubectl

- name: "Changing the driver to systemd"
  copy:
            dest: "/etc/docker/daemon.json"
            content: '{
                      "exec-opts": ["native.cgroupdriver=systemd"]
                      }'

- name: "Restarting docker service"
  service:
            name: "docker"
            state: restarted

#- name: "Installing EPEL-Release"
#  package:
#                 name: "https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm"
#                 state: present
#                 disable_gpg_check: True

- name: "Installing iproute-tc software"
  package:
            name: "iproute-tc"
            state: present

- name: appending systcl file
  copy: 
     dest: "/etc/sysctl.d/k8s.conf"
     content: |
             net.bridge.bridge-nf-call-ip6tables = 1
             net.bridge.bridge-nf-call-iptables = 1
#  shell: "cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf \n net.bridge.bridge-nf-call-ip6tables = 1 \n net.bridge.bridge-nf-call-iptables = 1"


#- name: Edit /etc/sysctl.conf file
#  lineinfile:
#    dest: /etc/sysctl.conf
#    line: "net.bridge.bridge-nf-call-iptables = 1"

- name: "Starting sysctl service"
  command: "sudo sysctl --system"

#- name: Create /run/flannel directory if it does not exist
#  file:
#    path: /run/flannel
#    state: directory

#- name: copying flannel subnet env file
#  copy:          
#            dest: "/run/flannel/subnet.env"
#            content: "FLANNEL_NETWORK={{ pod_network_cidr }} \n\
#                      FLANNEL_SUBNET=10.240.0.1/24 \n\
#                      FLANNEL_MTU=1450 \n\
#                      FLANNEL_IPMASQ=true \n"
  
- name: start kubelet
  service:
       name: kubelet
       #daemon_reload: yes
       state: started
       enabled: yes

- name: Copy the join command to slave node location
  copy: 
      src: /tmp/join-command 
      dest: /tmp/join-command.sh 
      mode: +x 

#- name: updating join cmd
#  replace:
#      path: /tmp/join-command.sh
#      regexp: "{{ hostvars['localhost'].ec2.results[0].instances[0].private_ip }}"
#      replace: "{{ hostvars['localhost'].ec2.results[0].instances[0].public_ip }}"

#- name: setting proc/sys/net/ipv4/ip_forward contents to 1
#  shell: "echo 1 | sudo tee /proc/sys/net/ipv4/ip_forward"

- name: join command
  shell: "sh /tmp/join-command.sh"

#- name: restart kubelet
#  service:
#       name: kubelet
#       #daemon_reload: yes
#       state: restarted
 
- debug:
        msg: "instances are configured as Worker nodes ..."


